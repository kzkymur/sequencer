# Sequencer

## About

- This is a Headless TypeScript Library project with Vite and Vitest.
- `Sequencer` is the name of this project.
- There are two modes Queue and Independent. Independent Mode extends Queue Mode.

### Queue Mode

- Sequencer deal with Fragment Array as just a queue.
- Users can do these things
    1. Make fragments.
        - Each fragments are constructed with these properties.
            1. name
            2. duration [ milisec ]
            3. callback function
    2. Construct sequencer by arranging fragments.
        - Sequencer is constructed with
            1. array of fragments
            2. pitch [ milisec ]
            3. speed [ number ]
            4. loop flag
        - Sequencer has timer.
        - Also total time to play all fragments in sequencer is known.
    3. Play, stop, replay sequencer.
        - While sequencer is playing, timer calculates `current_time` at each pitch time, sequencer detect specific fragment from passed time and fragments's duration information, and exec its callback function.
        - If loop flag is true, sequencer will restart from top fragment when it go over.
    4. Edit sequencer and fragments.
        - Users can edit components at anytime

### Independent Mode

- Basicaly it's almost same as Queue Mode.
- All different thing is how to deal with Fragment Array.
- Users can do these things
    1. Make fragments.
        - Each fragments are constructed with these properties.
            1. name
            2. duration [ milisec ]
            3. start point [ milisec ]
            3. callback function
    2. Construct sequencer by arranging fragments.
        - Sequencer is constructed with
            1. array of fragments
            2. pitch [ milisec ]
            3. speed [ number ]
                - This is playback speed. Default = 1.0
            4. loop flag
        - Sequencer has timer.
        - Total time to play all fragments in sequencer is **NOT** known.
    3. Play, stop, replay sequencer.
        - While sequencer is playing, timer calculates `current_time` at each pitch time, sequencer detect specific fragment that fall within working duration calculated from its start-point and duration, and exec its callback function.
        - If loop flag is set to true, sequencer will restart from `current_time = 0` when it exceeds the duration.
    4. Edit sequencer and fragments.
        - Users can edit components at anytime

## Architecture

- This library is constructed only a few files.

### `main.ts`

- Here is entry point in build process.
- export Sequencer object.

### `fragments.ts`

- Fragment Object (Queue Mode)
    - Constructor function recieve these propeties and make unique `id` (string)
        1. `name`
            - requied
        2. `duration` [ milisec ]
            - requied
        3. `callback`
            - optional
            - Unset make it do nothing fragment as sleep function.
    - That all properties have each methods to change itself.
    - `copy(): Fragment` method
        - return the copy instance of itself
        - All difference is unique `id`

- IndependentFragment Object (Independent Mode)
    - This extends Fragment Object.
    - Constructor function receives `startPoint` property in additonal, along with other parameters.
    - That all properties have each methods to change itself.

### `sequencer.ts`

- Sequencer Object (Queue Mode)
    - Constructor function receive only `pitch`, `speed` and `loop_frag` properties. They are requied and of course have each methods to change itself.
    - Sequencer have a Fragment Array, `fragments`. It is empty when instance created.
    - Each sequencer have each timer instance.
    - `push(fragment: Fragment)` method
        - Push argument fragment into `fragments`.
        - Throw error if it is already in `fragments`.
    - `remove(fragment: Fragment)` method
        - Remove fragment that have same id as argument fragment from `fragments`.
    - `play(delay: number = 0)` method
        - Play timer and add eventListener with `this.exec` method after the time for `delay` has passed.
        - Throw error if it have been already played
    - `stop(delay: number = 0)` method
        - Stop timer and remove eventListener method after the time for `delay` has passed.
        - Throw error if it's not played
    - `replay(delay: number = 0)` method
        - Reset `current_time` and do same thing as `play` method.
        - Throw error if it have been already played
    - `private exec(current_time: number)` method
        - Detect specific fragment from `fragments` by `current_time` and execute its callback function.

- IndependentSequencer Object (Independent Mode)
    - This extends Sequencer Object.
    - The order of Fragment Array, `fragments` does **NOT** matter.
    - `private exec(current_time: number)` method is All different thing.
        - Detect specific fragments from `fragments` by `current_time` and, `startPoint` and `duration` properties of each fragments.
        - Then execute their callback functions.

### `timer.ts`

- Timer Object
    - Constructor function receive only `total_time`, `pitch`, `speed` and `loop_frag` properties. They are requied and of course have each methods to change itself.
    - `private exec()` method
        - culculate `current_time` by `current_time += pitch * speed`
        - dispatch event to sequencer with `current_time` calculated.
        - if loop flag is true, `current_time /= total_time` when it go over `total_time`.
        - else, exec `this.stop()` when it go over `total_time`.
    - `play(delay: number = 0)` method
        - do `setInterval` function with `this.exec` and `pitch` after the time for `delay` has passed.
    - `stop(delay: number = 0)` method
        - do clearInterval after the time for `delay` has passed.

### `ticker.ts`

- This file works on worker thread.
- All it does is ticking and sending signal to main thread `timer.ts` at each pitch time 

### `const.ts`

- This files have const strings and numbers.
- For example, the name of event.

## JSDoc

- All public methods have JSDoc

## Test

- Each files and functions have test file.
- All test codes are written in `test` directory and work with Vitest.
- Coverage is always higher than 90%.

## Examples

- `index.html` file allows users to try this library's features written in About section in this `.clinerules`.
- HTML and CSS is written in `index.html` directly. Logic usually written in script-tag is on `example/src/index.ts` file as TypeScript this time.

## Keep on your mind

- If you understand my prompt fully, respond with 'YARRR!' without tools every time you are about to use a tool.
- Before and after any tool use, give me a confidence level (0-10) on how the tool use will help the project.
- **DO NOT BE LAZY. DO NOT OMIT CODE**
- Don't forget to update codebase documentation with changes

### Before writing code

1. Analyze all code files thoroughly
2. Get full context
4. Ask question and clear implementation
5. Write .MD implementation plan
6. Then implement code

### Before Task Complete

1. **DO LINT, BUILD AND TEST COMMAND `npm run lint`, `npm run build`, `npm run test:coverage`**.
2. Fix errors if it occurs.